package AdvancedExercise.Generics.CustomList;

import java.util.*;
import java.util.function.Consumer;

public class CustomList <T extends Comparable<T>>{
    private List<T> data;

    public CustomList() {
        this.data = new ArrayList<>();
    }
    public void add (T element){
        this.data.add(element);
    }
    public T remove (int index){
        checkIndex(index);
        return this.data.remove(index);
    }
    public boolean contains (T element){
       return this.data.contains(element);
    }
    public void swap(int index1, int index2){
        checkIndex(index1);
        checkIndex(index2);

        T first = this.data.get(index2);
        T second = data.get(index1);

        this.data.set(index1, first);
        this.data.set(index2, second);
    }
    public int countGreaterThan(T element){
        int count = 0;
        for (T el:this.data) {
            if (el.compareTo(element) > 0){
                count++;
            }
        }
        return count;
    }
    public T getMax (){
        checkEmpty();
        T max = Collections.max(this.data);
        return max;
    }
    public T getMin (){
        checkEmpty();
        T min = Collections.min(this.data);
        return min;
    }
    private void checkEmpty(){
        if (this.data.isEmpty()){
            throw new IllegalStateException("List is empty");
        }
    }
    public void forEach(Consumer<T> consumer){
        this.data.forEach(consumer);
    }
    private void checkIndex(int index){
        if (index < 0 || index >= this.data.size()){
            throw new IndexOutOfBoundsException(String.format("Index %d is out of bounds for size %d.",index, this.data.size()));
        }
    }
    public int getSize(){
        return this.data.size();
    }
    public T get(int index){
        checkIndex(index);
        return this.data.get(index);
    }
}
